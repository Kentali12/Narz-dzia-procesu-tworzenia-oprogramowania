# -*- coding: utf-8 -*-
"""StringProcessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zd2QlLe9QQYutfjLEX5lSxO2Atim8CmD
"""

all_locality = open('miejscowosci.txt').read().split('\n')
print(all_locality)
print(len(all_locality))

"""# Zadanie 1. Ilość miejscowości na "Ż"
"""

letter = "Ż"
how_many = 0
for i in all_locality:
  if i[0] == letter:
    how_many += 1
print(f"Ilość miejscowości na {letter}: {how_many}")

"""# Zadanie 2. Wypisać miejscowości na daną literę"""

letter = input("Podaj literę: ")
for i in all_locality:
  if i[0] == letter.upper():
    print(i,end=" ")

"""# Zadanie 3. Zliczyć ilość miejscowości na każdą literę alfabetu

## Litery wygenerowane z kodów ASCI
"""

for i in range(65, 91):
  print(chr(i), end=": ")
  how_many = 0
  for j in all_locality:
    if j[0] == chr(i):
      how_many += 1
  print(how_many)

"""## Lista liter w krotce"""

letters = ('A', 'Ą', 'B', 'C', 'Ć', 'D', 'E', 'Ę', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'Ł', 'M', 'N', 'O', 'Ó', 'P', 'Q', 'R', 'S', 'Ś', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Ź', 'Ż')
for i in letters:
  print(i, end=": ")
  how_many = 0
  for j in all_locality:
    if j[0] == i:
      how_many += 1
  print(how_many)

#po optymalizacji
letters = ('A', 'Ą', 'B', 'C', 'Ć', 'D', 'E', 'Ę', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'Ł', 'M', 'N', 'O', 'Ó', 'P', 'Q', 'R', 'S', 'Ś', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Ź', 'Ż')
letter_index = 0
for i in letters:
  how_many = 0
  for j in range(letter_index, len(all_locality)):
    if all_locality[j][0] == i:
      how_many += 1
    else:
      letter_index = j
      break
  print(i, ": ", how_many)

#ranking liter w słowniku
letters = ('A', 'Ą', 'B', 'C', 'Ć', 'D', 'E', 'Ę', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'Ł', 'M', 'N', 'O', 'Ó', 'P', 'Q', 'R', 'S', 'Ś', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Ź', 'Ż')
letter_index = 0
letter_rank = {}
for i in letters:
  how_many = 0
  for j in range(letter_index, len(all_locality)):
    if all_locality[j][0] == i:
      how_many += 1
    else:
      letter_index = j
      break
  letter_rank[i] = how_many
rank_list = sorted(letter_rank.items(), key=lambda x: x[1])
for i in rank_list:
  print(i)

"""# Zadanie 4. Występowanie liter"""

letters = ('A', 'Ą', 'B', 'C', 'Ć', 'D', 'E', 'Ę', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'Ł', 'M', 'N', 'O', 'Ó', 'P', 'Q', 'R', 'S', 'Ś', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Ź', 'Ż')
letter_rank = {}
for i in letters:
  how_many = 0
  for j in all_locality:
    for k in j:
      if k.upper() == i:
        how_many += 1
  letter_rank[i] = how_many
print(sorted(letter_rank.items(), key=lambda x: x[1])[::-1])

"""# Zadanie 5. Najkrótsze i nadłuższe nazwy *miejscowości*"""

min_length = len(all_locality[0])
shortest_names = []
max_length = len(all_locality[0])
longest_names = []
for i in all_locality:
  current_length = len(i)
  if min_length > current_length:
    min_length = current_length
    shortest_names = [i]
  elif min_length == current_length:
    shortest_names.append(i)
  if max_length < current_length:
    max_length = current_length
    longest_names = [i]
  elif max_length == current_length:
    longest_names.append(i)
print("Najkrótsze nazwy:", shortest_names)
print("Najdłuższe nazwy:", longest_names)